package com.lulan.shincolle.entity;

import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityAgeable;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.EntityAIAttackOnCollide;
import net.minecraft.entity.ai.EntityAIFollowOwner;
import net.minecraft.entity.ai.EntityAIHurtByTarget;
import net.minecraft.entity.ai.EntityAILookIdle;
import net.minecraft.entity.ai.EntityAIMoveTowardsTarget;
import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
import net.minecraft.entity.ai.EntityAIOpenDoor;
import net.minecraft.entity.ai.EntityAIOwnerHurtByTarget;
import net.minecraft.entity.ai.EntityAIOwnerHurtTarget;
import net.minecraft.entity.ai.EntityAIPanic;
import net.minecraft.entity.ai.EntityAIRestrictOpenDoor;
import net.minecraft.entity.ai.EntityAITargetNonTamed;
import net.minecraft.entity.ai.EntityAITempt;
import net.minecraft.entity.ai.EntityAIWander;
import net.minecraft.entity.ai.EntityAIWatchClosest;
import net.minecraft.entity.ai.EntityAIWatchClosest2;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.monster.EntitySlime;
import net.minecraft.entity.monster.IMob;
import net.minecraft.entity.passive.EntityCow;
import net.minecraft.entity.passive.EntitySheep;
import net.minecraft.entity.passive.EntityTameable;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.DamageSource;
import net.minecraft.util.MathHelper;
import net.minecraft.util.StatCollector;
import net.minecraft.world.World;

import com.lulan.shincolle.ShinColle;
import com.lulan.shincolle.ai.EntityAIInRangeTarget;
import com.lulan.shincolle.ai.EntityAIRangeAttack;
import com.lulan.shincolle.ai.EntityAIShipFloating;
import com.lulan.shincolle.ai.EntityAIShipSit;
import com.lulan.shincolle.handler.ConfigHandler;
import com.lulan.shincolle.init.ModItems;
import com.lulan.shincolle.inventory.ContainerShipInventory;
import com.lulan.shincolle.reference.AttrID;
import com.lulan.shincolle.reference.AttrValues;
import com.lulan.shincolle.reference.GUIs;
import com.lulan.shincolle.reference.Reference;
import com.lulan.shincolle.tileentity.TileEntitySmallShipyard;
import com.lulan.shincolle.utility.LogHelper;

import cpw.mods.fml.common.network.internal.FMLNetworkHandler;
import cpw.mods.fml.common.registry.IEntityAdditionalSpawnData;

public class EntityHeavyCruiserRi extends BasicEntitySmallShip {
	
	public EntityHeavyCruiserRi(World world) {
		super(world);
		this.setSize(0.9F, 1.7F);	//碰撞大小 跟模型大小無關
		this.setCustomNameTag(StatCollector.translateToLocal("entity.shincolle:EntityHeavyCruiserRi.name"));
		this.ShipType = AttrValues.ShipType.HEAVY_CRUISER;
		this.ShipID = AttrID.HeavyCruiserRI;
		ExtProps = (ExtendShipProps) getExtendedProperties(ExtendShipProps.SHIP_EXTPROP_NAME);	
		this.initTypeModify();
		
	}
	
	public void setAIList() {
		super.setAIList();
		
		//floating on water
		this.tasks.addTask(1, new EntityAIShipSit(this, this.getOwner()));
		this.tasks.addTask(2, new EntityAIShipFloating(this));
		
		//use range attack (light)
		this.tasks.addTask(11, new EntityAIRangeAttack(this));
		
		//use melee attack
		this.tasks.addTask(12, new EntityAIAttackOnCollide(this, 1D, true));
		this.tasks.addTask(13, new EntityAIMoveTowardsTarget(this, 1D, 64F));
		
		//idle AI
		//moving
//      this.tasks.addTask(20, new EntityAIRestrictOpenDoor(this));
//		this.tasks.addTask(20, new EntityAIOpenDoor(this, true));
//		this.tasks.addTask(21, new EntityAITempt(this, 1.1D, Items.cake, false));
//		this.tasks.addTask(22, new EntityAIFollowOwner(this, 1F, 4F, 6F));
//		this.tasks.addTask(23, new EntityAIWatchClosest(this, EntityPlayer.class, 5F));
//		this.tasks.addTask(24, new EntityAIWander(this, 0.8D));
//		this.tasks.addTask(25, new EntityAILookIdle(this));
		
/* 		//switch AI method
		this.tasks.removeTask(this.aiAttackOnCollide);
        this.tasks.removeTask(this.aiArrowAttack);
        ItemStack itemstack = this.getHeldItem();

        if (itemstack != null && itemstack.getItem() == Items.bow)
        {
            this.tasks.addTask(4, this.aiArrowAttack);
        }
        else
        {
            this.tasks.addTask(4, this.aiAttackOnCollide);
        }*/
	}
	
	public void setAITargetList() {	
		//target AI
	//NYI:	this.targetTasks.addTask(1, new EntityAIOwnerPointTarget(this));
		this.targetTasks.addTask(2, new EntityAIOwnerHurtByTarget(this));
		this.targetTasks.addTask(3, new EntityAIOwnerHurtTarget(this));
		this.targetTasks.addTask(3, new EntityAIInRangeTarget(this, 0.4F, 1));
	}

	//平常音效
	protected String getLivingSound() {
        return Reference.MOD_ID+":ship-say";
    }
	
	//受傷音效
    protected String getHurtSound() {
    	
        return Reference.MOD_ID+":ship-hurt";
    }

    //死亡音效
    protected String getDeathSound() {
    	return Reference.MOD_ID+":ship-death";
    }

    //音效大小
    protected float getSoundVolume() {
        return 0.4F;
    }

    @Override
    public void onLivingUpdate() {
    	//check server side
    	if(!this.worldObj.isRemote) {
    		//check every 5 sec
    		if(this.ticksExisted % 100 == 0) {
	    		//apply potion effect in the night
	        	if (!this.worldObj.isDaytime()) {	
        			this.addPotionEffect(new PotionEffect(Potion.moveSpeed.id, 300, 2));
        			this.addPotionEffect(new PotionEffect(Potion.jump.id, 300, 2));
        		} 		
        	}
    	}
    	
    	super.onLivingUpdate();
    }
    
    //this method work in server side
    @Override
    public boolean attackEntityFrom(DamageSource attacker, float atk) {		
    	//set hurt face
		this.setEntityEmotion(AttrValues.Emotion.O_O, true);
  	
    	return super.attackEntityFrom(attacker, atk);
    }
	

}

